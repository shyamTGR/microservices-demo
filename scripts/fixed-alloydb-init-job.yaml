apiVersion: batch/v1
kind: Job
metadata:
  name: fixed-alloydb-init
spec:
  template:
    spec:
      serviceAccountName: shoppingassistantservice
      restartPolicy: Never
      containers:
      - name: init
        image: gcr.io/wise-karma-472219-r2/shoppingassistantservice:fixed-v2
        command: ["python3", "-c"]
        args:
        - |
          import os
          import sys
          import json
          import logging
          import psycopg2
          from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
          from google.cloud import secretmanager_v1
          import requests
          
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)
          
          # Product data from products.json
          PRODUCTS = [
              {"id": "OLJCESPC7Z", "name": "Sunglasses", "description": "Add a modern touch to your outfits with these sleek aviator sunglasses.", "categories": ["accessories"]},
              {"id": "66VCHSJNUP", "name": "Tank Top", "description": "Perfectly cropped cotton tank, with a scooped neckline.", "categories": ["clothing", "tops"]},
              {"id": "1YMWWN1N4O", "name": "Watch", "description": "This gold-tone stainless steel watch will work with most of your outfits.", "categories": ["accessories"]},
              {"id": "L9ECAV7KIM", "name": "Loafers", "description": "A neat addition to your summer wardrobe.", "categories": ["footwear"]},
              {"id": "2ZYFJ3GM2N", "name": "Hairdryer", "description": "This lightweight hairdryer has 3 heat and speed settings. It's perfect for travel.", "categories": ["hair", "beauty"]},
              {"id": "0PUK6V6EV0", "name": "Candle Holder", "description": "This small but intricate candle holder is an excellent gift.", "categories": ["decor", "home"]},
              {"id": "LS4PSXUNUM", "name": "Salt & Pepper Shakers", "description": "Add some flavor to your kitchen.", "categories": ["kitchen", "home"]},
              {"id": "9SIQT8TOJO", "name": "Vintage Typewriter", "description": "This typewriter looks good in your living room.", "categories": ["vintage", "decor", "home"]},
              {"id": "6E92ZMYYFZ", "name": "Film Camera", "description": "This camera looks like it's a few decades old but it's actually brand new.", "categories": ["photography", "vintage"]}
          ]
          
          def get_embeddings(texts, api_key):
              """Generate embeddings using Gemini API."""
              logger.info(f"Generating embeddings for {len(texts)} texts...")
              
              embeddings = []
              for i, text in enumerate(texts):
                  try:
                      url = f"https://generativelanguage.googleapis.com/v1beta/models/embedding-001:embedContent?key={api_key}"
                      headers = {"Content-Type": "application/json"}
                      data = {
                          "model": "models/embedding-001",
                          "content": {"parts": [{"text": text}]}
                      }
                      
                      response = requests.post(url, headers=headers, json=data)
                      response.raise_for_status()
                      
                      embedding = response.json()["embedding"]["values"]
                      embeddings.append(embedding)
                      logger.info(f"Generated embedding {i+1}/{len(texts)}")
                      
                  except Exception as e:
                      logger.error(f"Failed to generate embedding for text {i}: {e}")
                      raise
              
              return embeddings
          
          def init_database():
              logger.info("Starting AlloyDB initialization...")
              
              PROJECT_ID = os.environ["PROJECT_ID"]
              ALLOYDB_IP = os.environ["ALLOYDB_IP"]
              ALLOYDB_DATABASE_NAME = os.environ["ALLOYDB_DATABASE_NAME"]
              ALLOYDB_TABLE_NAME = os.environ["ALLOYDB_TABLE_NAME"]
              ALLOYDB_SECRET_NAME = os.environ["ALLOYDB_SECRET_NAME"]
              GOOGLE_API_KEY = os.environ["GOOGLE_API_KEY"]
              
              # Get password from Secret Manager
              logger.info("Getting password from Secret Manager...")
              secret_manager_client = secretmanager_v1.SecretManagerServiceClient()
              secret_name = secret_manager_client.secret_version_path(project=PROJECT_ID, secret=ALLOYDB_SECRET_NAME, secret_version="latest")
              secret_request = secretmanager_v1.AccessSecretVersionRequest(name=secret_name)
              secret_response = secret_manager_client.access_secret_version(request=secret_request)
              password = secret_response.payload.data.decode("UTF-8").strip()
              
              # Connect directly to AlloyDB using psycopg2
              logger.info(f"Connecting to AlloyDB at {ALLOYDB_IP}...")
              conn = psycopg2.connect(
                  host=ALLOYDB_IP,
                  port=5432,
                  user="postgres",
                  password=password,
                  database=ALLOYDB_DATABASE_NAME,
                  connect_timeout=30
              )
              conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
              
              try:
                  with conn.cursor() as cursor:
                      # Enable vector extension
                      logger.info("Enabling vector extension...")
                      cursor.execute("CREATE EXTENSION IF NOT EXISTS vector")
                      
                      # Create table if not exists
                      logger.info("Creating catalog_items table...")
                      cursor.execute(f"""
                          CREATE TABLE IF NOT EXISTS {ALLOYDB_TABLE_NAME} (
                              id VARCHAR PRIMARY KEY,
                              name VARCHAR NOT NULL,
                              description TEXT NOT NULL,
                              categories TEXT[],
                              price_usd DECIMAL(10,2),
                              picture VARCHAR,
                              product_embedding VECTOR(768)
                          )
                      """)
                      
                      # Create vector index
                      logger.info("Creating vector similarity index...")
                      cursor.execute(f"""
                          CREATE INDEX IF NOT EXISTS {ALLOYDB_TABLE_NAME}_embedding_idx 
                          ON {ALLOYDB_TABLE_NAME} USING hnsw (product_embedding vector_cosine_ops)
                      """)
                      
                      # Generate embeddings for products
                      texts = [product["description"] for product in PRODUCTS]
                      embeddings = get_embeddings(texts, GOOGLE_API_KEY)
                      
                      # Insert products with embeddings
                      logger.info("Inserting products with embeddings...")
                      for product, embedding in zip(PRODUCTS, embeddings):
                          cursor.execute(f"""
                              INSERT INTO {ALLOYDB_TABLE_NAME} 
                              (id, name, description, categories, product_embedding)
                              VALUES (%s, %s, %s, %s, %s)
                              ON CONFLICT (id) DO UPDATE SET
                                  name = EXCLUDED.name,
                                  description = EXCLUDED.description,
                                  categories = EXCLUDED.categories,
                                  product_embedding = EXCLUDED.product_embedding
                          """, (
                              product["id"],
                              product["name"],
                              product["description"],
                              product["categories"],
                              embedding
                          ))
                      
                      # Verify insertion
                      cursor.execute(f"SELECT COUNT(*) FROM {ALLOYDB_TABLE_NAME}")
                      count = cursor.fetchone()[0]
                      logger.info(f"âœ… Successfully inserted {count} products")
                      
                      # Test vector search
                      logger.info("Testing vector search...")
                      test_embedding = get_embeddings(["stylish accessories"], GOOGLE_API_KEY)[0]
                      cursor.execute(f"""
                          SELECT id, name, description, 
                                 product_embedding <=> %s as distance
                          FROM {ALLOYDB_TABLE_NAME}
                          ORDER BY distance
                          LIMIT 3
                      """, (test_embedding,))
                      
                      results = cursor.fetchall()
                      logger.info("âœ… Vector search test results:")
                      for row in results:
                          logger.info(f"  - {row[1]}: {row[2][:50]}... (distance: {row[3]:.4f})")
                      
                      logger.info("ðŸŽ‰ Database initialization completed successfully!")
              
              finally:
                  conn.close()
          
          try:
              init_database()
              logger.info("SUCCESS: AlloyDB initialization complete")
          except Exception as e:
              logger.error(f"FAILED: {e}")
              import traceback
              traceback.print_exc()
              sys.exit(1)
        env:
        - name: GOOGLE_API_KEY
          value: AIzaSyCjvgLUncC4iVQlff_CwUXmAihYDvqEW74
        - name: ALLOYDB_IP
          value: "10.36.0.2"
        - name: ALLOYDB_DATABASE_NAME
          value: products
        - name: ALLOYDB_TABLE_NAME
          value: catalog_items
        - name: ALLOYDB_SECRET_NAME
          value: alloydb-secret
        - name: PROJECT_ID
          value: wise-karma-472219-r2
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 512Mi
  backoffLimit: 2